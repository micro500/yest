---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static website hosting with S3'
Resources:
  # Create the bucket to contain the website HTML
  CodeS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        ErrorDocument: 'error.html'
        IndexDocument: 'index.html'
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, POST, HEAD]
          AllowedOrigins: ['*']
          ExposedHeaders: [Date]
          Id: myCORSRuleId1
          MaxAge: '3600'
  CodeBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: CodeS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: CodeS3Bucket
                  - /*
            Principal: '*'
  ImagesS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, POST, HEAD]
          AllowedOrigins: ['*']
          ExposedHeaders: [Date]
          Id: myCORSRuleId1
          MaxAge: '3600'
  ImagesBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: ImagesS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: ImagesS3Bucket
                  - /*
            Principal: '*'
  MyRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: A test API
      Name: MyRestAPI
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref MyRestApi
      Schema: {}
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref MyRestApi
      StageName: 'v0'
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProxyResourceANY
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref MyRestApi
  UploadEndpoint:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt 
        - MyRestApi
        - RootResourceId
      PathPart: upload
  ProxyResourceANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref UploadEndpoint
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambda.Arn}/invocations'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              # TODO implement
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: Invoke a function during stack creation.
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt UploadLambda.Arn   
  CodeBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestCodeS3Bucket
      Type: String
      Value: !Ref CodeS3Bucket
      Description: Yest S3 bucket name for Code
      AllowedPattern: ".*"
  ImageBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestImagesS3Bucket
      Type: String
      Value: !Ref ImagesS3Bucket
      Description: Yest S3 bucket name for Images
      AllowedPattern: ".*"
  ApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestApiEndpoint
      Type: String
      Value: !Sub 'https://${MyRestApi}.execute-api.us-west-2.amazonaws.com/v0/'
      Description: Yest api endpoint
      AllowedPattern: ".*"
Outputs:
  BucketName:
    Description: 'Code S3 Bucket Name'
    Value: !Ref CodeS3Bucket
  APIEndpoint:
    Description: 'API URL'
    Value: !Sub 'https://${MyRestApi}.execute-api.us-west-2.amazonaws.com/v0/'