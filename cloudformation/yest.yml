---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static website hosting with S3'
Resources:
  # Create the bucket to contain the website HTML
  CodeS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        ErrorDocument: 'error.html'
        IndexDocument: 'index.html'
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, POST, HEAD]
          AllowedOrigins: ['*']
          ExposedHeaders: [Date]
          Id: myCORSRuleId1
          MaxAge: '3600'
  CodeBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: CodeS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: CodeS3Bucket
                  - /*
            Principal: '*'
  ImagesS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ['*']
          AllowedMethods: [GET, PUT, POST, HEAD]
          AllowedOrigins: ['*']
          ExposedHeaders: [Date]
          Id: myCORSRuleId1
          MaxAge: '3600'
  ImagesBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: ImagesS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: ImagesS3Bucket
                  - /*
            Principal: '*'
  MyRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: A test API
      Name: MyRestAPI
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref MyRestApi
      Schema: {}
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref MyRestApi
      StageName: 'v0'
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ProxyResourceANY
      - ProxyResourceANYImages
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref MyRestApi
  UploadEndpoint:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt 
        - MyRestApi
        - RootResourceId
      PathPart: upload
  ProxyResourceANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref UploadEndpoint
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadLambda.Arn}/invocations'
        
  ImagesEndpoint:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt 
        - MyRestApi
        - RootResourceId
      PathPart: images
  ProxyResourceANYImages:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref ImagesEndpoint
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ImagesLambda.Arn}/invocations'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Path: '/'
  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              # TODO implement
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!'),
                  'headers': {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'}
              }
  ImagesLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              # TODO implement
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!'),
                  'headers': {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS, PUT, DELETE'}
              }
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                  - !GetAtt UploadLambda.Arn
                  - !GetAtt ImagesLambda.Arn
  CodeBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestCodeS3Bucket
      Type: String
      Value: !Ref CodeS3Bucket
      Description: Yest S3 bucket name for Code
      AllowedPattern: ".*"
  ImageBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestImagesS3Bucket
      Type: String
      Value: !Ref ImagesS3Bucket
      Description: Yest S3 bucket name for Images
      AllowedPattern: ".*"
  ApiEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestApiEndpoint
      Type: String
      Value: !Sub 'https://${MyRestApi}.execute-api.us-west-2.amazonaws.com/v0/'
      Description: Yest api endpoint
      AllowedPattern: ".*"
  UploadFunctionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestUploadFunction
      Type: String
      Value: !Ref UploadLambda
      Description: Yest upload lambda function name
      AllowedPattern: ".*"
  ImagesFunctionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: YestImagesFunction
      Type: String
      Value: !Ref ImagesLambda
      Description: Yest images lambda function name
      AllowedPattern: ".*"
  UpdateEndpointLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import urllib3
          import json
          import boto3

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']

              print(responseUrl)

              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData

              json_responseBody = json.dumps(responseBody)

              print("Response body:\n" + json_responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              http = urllib3.PoolManager()
              
              try:
                  response = http.request('PUT',
                                  responseUrl,
                                  body = json_responseBody,
                                  headers = headers,
                                  retries = False)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
                  
          def lambda_handler(event, context):
              send(event, context, SUCCESS, {})

              client = boto3.client('ssm')
              
              endpoint = client.get_parameter(Name='YestApiEndpoint')["Parameter"]["Value"]
              code_bucket = client.get_parameter(Name='YestCodeS3Bucket')["Parameter"]["Value"]
              
              file_name = "api_endpoint.js"
              
              file_string = "const API_ENDPOINT = '" + endpoint + "'"
              encoded_string = file_string.encode("utf-8")
              
              s3 = boto3.resource("s3")
              s3.Bucket(code_bucket).put_object(Key=file_name, Body=encoded_string)
              
              return None
  Primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    DependsOn: 
      - UpdateEndpointLambda
      - CodeBucketParameter
      - ApiEndpointParameter
      - CodeS3Bucket
    Properties:
      ServiceToken: !GetAtt UpdateEndpointLambda.Arn
Outputs:
  BucketName:
    Description: 'Code S3 Bucket Name'
    Value: !Ref CodeS3Bucket
  APIEndpoint:
    Description: 'API URL'
    Value: !Sub 'https://${MyRestApi}.execute-api.us-west-2.amazonaws.com/v0/'
  WebsiteAddress:
    Description: 'Website Address'
    Value: !Sub 'https://${CodeS3Bucket}.s3-us-west-2.amazonaws.com/index.html'